# This is not yet complete
grammar ObjLang
  rule program
    blank?
    (class_def / stmt / blank)*
    blank?
  end

  rule stmt
    blank? ( compound_expr / simple_expr nl )
  end

  rule expr
    compound_expr / simple_expr
  end

  rule compound_expr
    meth_def / if_expr
  end

  rule if_expr
    'if' sp expr sp? nl stmt*
    (blank? 'elsif' sp expr sp? nl stmt*)*
    (blank? 'else' sp? nl stmt*)?
    blank? end_kw nl
  end

  rule simple_expr
    atomic_expr sp? op sp? simple_expr / atomic_expr
  end

  rule atomic_expr
    send / 'true' / 'false' / 'nil' / integer / assignment / varref / '(' sp? simple_expr sp? ')'
  end

  rule op
    '+' / '-' / '*' / '/' / '<' / '>' / '<<' / '>>' / '<=' / '>=' / '==' / '&&' / '||'
  end

  # Expressions
  rule class_def
    'class' sp
    const_id (sp? '<' sp? const_id)? sp? nl
    (stmt / blank)*
    end_kw nl
  end

  rule meth_def
    'def' sp
    id sp? '(' ( sp? id ( sp? ',' sp? id )* )? sp? ')' nl
    (stmt / blank)*
    end_kw nl
  end

  rule send
    (varref '.')? varref '(' ( sp? simple_expr ( sp? ',' sp? simple_expr)* )? sp? ')'
  end

  rule assignment
    varref sp? '=' sp? expr
  end

  rule integer
    [0-9]+
  end

  rule varref
    !'def' !'class' !'if' !'elsif' !'else' !'true' !'false' !'nil' !'end' id
  end

  # Keywords
  rule end_kw
    'end'
  end

  # Identifiers
  rule const_id
    [A-Z] [A-Za-z_]*
  end
  rule id
    [A-Za-z_]+
  end

  # Three different classes of whitespace
  rule sp
    [ \t]+
  end
  rule blank
    [ \t\n]+
  end
  rule nl
    [\n]
  end
end
