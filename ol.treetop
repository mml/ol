# This is not yet complete
#  vim:sts=2:sw=2:
grammar ObjLang
  rule program
    stmt* <Program>
  end

  rule stmt
    expr STMT_END
  end

  rule expr
    blank (class_def / meth_def / if_expr / op_app / atomic_expr) sp?
  end

  rule if_expr
    IF sp test:expr STMT_END cons:stmt*
    blank if_rest <IfExpr>
  end

  rule if_rest
    elsif_expr / else_expr / END
  end

  rule elsif_expr
    ELSIF sp expr STMT_END stmt* if_rest
  end

  rule else_expr
    ELSE sp? STMT_END alt:stmt* blank END <ElseExpr>
  end

  rule op_app
    rand1:atomic_expr sp? op sp? rand2:expr <OpApp>
  end

  rule atomic_expr
    base:(
      message / TRUE / FALSE / NIL / integer / assignment / varref / parens
    ) message_chain?
  end

  rule message_chain
    ( '.' message )+ <MessageChain>
  end

  rule parens
    '(' sp? expr ')' <Parens>
  end

  rule op
    '+' / '-' / '*' / '/' / '<' / '>' / '<<' / '>>' / '<=' / '>=' / '==' / '&&' / '||'
  end

  # Expressions
  rule class_def
    CLASS sp
    name:const_id (sp? '<' sp? const_id)? sp? STMT_END
    body:stmt*
    blank END <ClassDef>
  end

  rule meth_def
    DEF sp
    name:id sp? '(' formals:( sp? first:id rest:( sp? ',' sp? id )* )? sp? ')' STMT_END
    body:stmt*
    blank END <MethDef>
  end

  rule message
    method:varref '(' params:( sp? first:expr rest:( sp? ',' sp? expr)* )? sp? ')' <Message>
  end

  rule assignment
    lhs:varref sp? '=' sp? rhs:expr <Assignment>
  end

  rule integer
    [0-9]+ <Integer>
  end

  rule varref
    !DEF !CLASS !IF !ELSIF !ELSE !TRUE !FALSE !NIL !END id
  end

  # Keywords
  rule CLASS
    'class'
  end

  rule END
    'end'
  end

  rule DEF
    'def'
  end

  rule IF
    'if'
  end

  rule ELSIF
    'elsif'
  end

  rule ELSE
    'else'
  end

  rule TRUE
    'true'
  end

  rule FALSE
    'false'
  end

  rule NIL
    'nil'
  end

  # Identifiers
  rule const_id
    [A-Z] [A-Za-z_]* <Identifier>
  end
  rule id
    [$@]? [A-Za-z_]+ <Identifier>
  end

  # Three different classes of whitespace
  rule sp
    [ \t]+ <Whitespace>
  end
  rule blank
    [ \t\n]* <Whitespace>
  end
  rule STMT_END
    [;\n] <EndExpr>
  end
end
